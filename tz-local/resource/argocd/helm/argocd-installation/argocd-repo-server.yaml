apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
  namespace: argocd
  labels:
    app.kubernetes.io/component: repo-server
    app.kubernetes.io/instance: argocd
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: argocd-repo-server
    app.kubernetes.io/part-of: argocd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: argocd
      app.kubernetes.io/name: argocd-repo-server
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/component: repo-server
        app.kubernetes.io/instance: argocd
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: argocd-repo-server
        app.kubernetes.io/part-of: argocd
    spec:
      volumes:
        - name: cmp-plugin
          configMap:
            name: cmp-plugin
            defaultMode: 420
        - name: custom-tools
          emptyDir: {}
        - name: helm-working-dir
          emptyDir: {}
        - name: plugins
          emptyDir: {}
        - name: var-files
          emptyDir: {}
        - name: tmp
          emptyDir: {}
        - name: ssh-known-hosts
          configMap:
            name: argocd-ssh-known-hosts-cm
            defaultMode: 420
        - name: tls-certs
          configMap:
            name: argocd-tls-certs-cm
            defaultMode: 420
        - name: gpg-keys
          configMap:
            name: argocd-gpg-keys-cm
            defaultMode: 420
        - name: gpg-keyring
          emptyDir: {}
        - name: argocd-repo-server-tls
          secret:
            secretName: argocd-repo-server-tls
            items:
              - key: tls.crt
                path: tls.crt
              - key: tls.key
                path: tls.key
              - key: ca.crt
                path: ca.crt
            defaultMode: 420
            optional: true
      initContainers:
        - name: copyutil
          image: quay.io/argoproj/argocd:v2.6.1
          command:
            - cp
            - '-n'
            - /usr/local/bin/argocd
            - /var/run/argocd/argocd-cmp-server
          resources: {}
          volumeMounts:
            - name: var-files
              mountPath: /var/run/argocd
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
        - name: download-tools
          image: registry.access.redhat.com/ubi8
          command:
            - sh
            - '-c'
          args:
            - >-
              curl -L
              https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64
              -o argocd-vault-plugin && chmod +x argocd-vault-plugin && mv
              argocd-vault-plugin /custom-tools/ && curl -L
              https://get.helm.sh/helm-v3.11.1-linux-amd64.tar.gz -o
              helm-v3.11.1-linux-amd64.tar.gz && tar -xvf
              helm-v3.11.1-linux-amd64.tar.gz && mv linux-amd64/helm
              /custom-tools/
          env:
            - name: AVP_VERSION
              value: 1.11.0
          resources: {}
          volumeMounts:
            - name: custom-tools
              mountPath: /custom-tools
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      containers:
        - name: repo-server
          image: quay.io/argoproj/argocd:v2.6.1
          command:
            - entrypoint.sh
          args:
            - argocd-repo-server
            - '--port=8081'
            - '--metrics-port=8084'
          ports:
            - name: repo-server
              containerPort: 8081
              protocol: TCP
            - name: metrics
              containerPort: 8084
              protocol: TCP
          env:
            - name: ARGOCD_RECONCILIATION_TIMEOUT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cm
                  key: timeout.reconciliation
                  optional: true
            - name: ARGOCD_REPO_SERVER_LOGFORMAT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.log.format
                  optional: true
            - name: ARGOCD_REPO_SERVER_LOGLEVEL
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.log.level
                  optional: true
            - name: ARGOCD_REPO_SERVER_PARALLELISM_LIMIT
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.parallelism.limit
                  optional: true
            - name: ARGOCD_REPO_SERVER_DISABLE_TLS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.disable.tls
                  optional: true
            - name: ARGOCD_TLS_MIN_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.minversion
                  optional: true
            - name: ARGOCD_TLS_MAX_VERSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.maxversion
                  optional: true
            - name: ARGOCD_TLS_CIPHERS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.tls.ciphers
                  optional: true
            - name: ARGOCD_REPO_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.repo.cache.expiration
                  optional: true
            - name: REDIS_SERVER
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.server
                  optional: true
            - name: REDIS_COMPRESSION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.compression
                  optional: true
            - name: REDISDB
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: redis.db
                  optional: true
            - name: REDIS_USERNAME
              valueFrom:
                secretKeyRef:
                  name: argocd-redis
                  key: redis-username
                  optional: true
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: argocd-redis
                  key: redis-password
                  optional: true
            - name: ARGOCD_DEFAULT_CACHE_EXPIRATION
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.default.cache.expiration
                  optional: true
            - name: ARGOCD_REPO_SERVER_OTLP_ADDRESS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: otlp.address
                  optional: true
            - name: ARGOCD_REPO_SERVER_MAX_COMBINED_DIRECTORY_MANIFESTS_SIZE
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.max.combined.directory.manifests.size
                  optional: true
            - name: ARGOCD_REPO_SERVER_PLUGIN_TAR_EXCLUSIONS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.plugin.tar.exclusions
                  optional: true
            - name: ARGOCD_REPO_SERVER_ALLOW_OUT_OF_BOUNDS_SYMLINKS
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.allow.oob.symlinks
                  optional: true
            - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_TAR_SIZE
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.streamed.manifest.max.tar.size
                  optional: true
            - name: ARGOCD_REPO_SERVER_STREAMED_MANIFEST_MAX_EXTRACTED_SIZE
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.streamed.manifest.max.extracted.size
                  optional: true
            - name: ARGOCD_GIT_MODULES_ENABLED
              valueFrom:
                configMapKeyRef:
                  name: argocd-cmd-params-cm
                  key: reposerver.enable.git.submodule
                  optional: true
            - name: HELM_CACHE_HOME
              value: /helm-working-dir
            - name: HELM_CONFIG_HOME
              value: /helm-working-dir
            - name: HELM_DATA_HOME
              value: /helm-working-dir
          resources: {}
          volumeMounts:
            - name: ssh-known-hosts
              mountPath: /app/config/ssh
            - name: tls-certs
              mountPath: /app/config/tls
            - name: gpg-keys
              mountPath: /app/config/gpg/source
            - name: gpg-keyring
              mountPath: /app/config/gpg/keys
            - name: argocd-repo-server-tls
              mountPath: /app/config/reposerver/tls
            - name: helm-working-dir
              mountPath: /helm-working-dir
            - name: plugins
              mountPath: /home/argocd/cmp-server/plugins
            - name: tmp
              mountPath: /tmp
          livenessProbe:
            httpGet:
              path: /healthz?full=true
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /healthz
              port: metrics
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
          securityContext:
            capabilities:
              drop:
                - ALL
            runAsNonRoot: true
            readOnlyRootFilesystem: true
            allowPrivilegeEscalation: false
            seccompProfile:
              type: RuntimeDefault
        - name: avp
          image: registry.access.redhat.com/ubi8
          command:
            - /var/run/argocd/argocd-cmp-server
          envFrom:
            - secretRef:
                name: argocd-vault-plugin-credentials
          resources: {}
          volumeMounts:
            - name: var-files
              mountPath: /var/run/argocd
            - name: plugins
              mountPath: /home/argocd/cmp-server/plugins
            - name: tmp
              mountPath: /tmp
            - name: cmp-plugin
              mountPath: /home/argocd/cmp-server/config/plugin.yaml
              subPath: avp.yaml
            - name: custom-tools
              mountPath: /usr/local/bin/argocd-vault-plugin
              subPath: argocd-vault-plugin
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
        - name: avp-helm
          image: registry.access.redhat.com/ubi8
          command:
            - /var/run/argocd/argocd-cmp-server
          envFrom:
            - secretRef:
                name: argocd-vault-plugin-credentials
          resources: {}
          volumeMounts:
            - name: var-files
              mountPath: /var/run/argocd
            - name: plugins
              mountPath: /home/argocd/cmp-server/plugins
            - name: tmp
              mountPath: /tmp
            - name: cmp-plugin
              mountPath: /home/argocd/cmp-server/config/plugin.yaml
              subPath: avp-helm.yaml
            - name: custom-tools
              mountPath: /usr/local/bin/argocd-vault-plugin
              subPath: argocd-vault-plugin
            - name: custom-tools
              mountPath: /usr/local/bin/helm
              subPath: helm
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
          securityContext:
            runAsUser: 999
            runAsNonRoot: true
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      serviceAccountName: argocd-repo-server
      serviceAccount: argocd-repo-server
      automountServiceAccountToken: true
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
